with Neo.System.Input; use Neo.System.Input;
with Interfaces.C;     use Interfaces.C;
with Interfaces;       use Interfaces;
with System;           use System;
package Neo.System.Graphics.Window is
  pragma Suppress(Elaboration_Check);
  Cursor_Off_Window : Exception;
  type Enumerated_State is (Fullscreen_State, Multi_Monitor_State, Windowed_State);
  type Record_Border is record
      Bottom : Integer_8_Signed := 0;
      Top    : Integer_8_Signed := 0;
      Left   : Integer_8_Signed := 0;
      Right  : Integer_8_Signed := 0;
    end record;
  package Vector_Record_Border is new Vectors(Record_Border);
  procedure Run;
  function Get_Borders           return Vector_Record_Border.Unprotected.Vector;
  function Get_Decoration        return Record_Border;
  function Get_Normalized_Cursor return Record_Location;
  Do_Hide_Mouse      :          Boolean          := True;
  MINIMUM_FACTOR     : constant Integer_8_Signed := 256;
  MULTI_MONITOR_NAME : constant String_2         := " Multi Monitor";
  VARIABLE_PREFIX    : constant String_2         := "w_";
  package Width                    is new Variable(VARIABLE_PREFIX & "width",      "Render image width",                     Integer_4_Positive, 640);
  package Height                   is new Variable(VARIABLE_PREFIX & "height",     "Render image height",                    Integer_4_Positive, 480);
  package Is_Iconized              is new Variable(VARIABLE_PREFIX & "minimized",  "Query if minimized",                     Boolean, False, False, False);
  package State                    is new Variable(VARIABLE_PREFIX & "state",      "Window state",                           Enumerated_State, Windowed_State);
  package Gamma_Red                is new Variable(VARIABLE_PREFIX & "red",        "Gamma red correction",                   Integer_4_Natural);
  package Gamma_Blue               is new Variable(VARIABLE_PREFIX & "blue",       "Gamma blue correction",                  Integer_4_Natural);
  package Gamma_Green              is new Variable(VARIABLE_PREFIX & "green",      "Gamma green correction",                 Integer_4_Natural);
  package Multi_Samples            is new Variable(VARIABLE_PREFIX & "multi",      "Multi-samples",                          Integer_4_Positive, 5);
  package Refreashes_Per_Second    is new Variable(VARIABLE_PREFIX & "hz",         "Screen refreshes per second",            Integer_4_Positive, 9);
  package Aspect_Wide_Vertical     is new Variable(VARIABLE_PREFIX & "widevert",   "Minimum wide vertical aspect ratio",     Integer_4_Positive, 3);
  package Aspect_Wide_Horizontal   is new Variable(VARIABLE_PREFIX & "widehorz",   "Minimum wide horizontal aspect ratio",   Integer_4_Positive, 4);
  package Aspect_Narrow_Vertical   is new Variable(VARIABLE_PREFIX & "narrowvert", "Minimum narrow vertical aspect ratio",   Integer_4_Positive, 9);
  package Aspect_Narrow_Horizontal is new Variable(VARIABLE_PREFIX & "narrowhorz", "Minimum narrow horizontal aspect ratio", Integer_4_Positive, 16);
private
  type Enumerated_Cursor is (System_Cursor, Active_Cursor, Inactive_Cursor);
  type Enumerated_Change is (Fullscreen_Change, Windowed_Change, Iconic_Change);
  type Enumerated_Resize is (Other_Resize, Left_Resize, Right_Resize, Top_Resize, Bottom_Resize, Top_Left_Resize, Top_Right_Resize, Bottom_Right_Resize, Bottom_Left_Resize);
  procedure Preform_Detect_Menu_Mode_Entry (Binding : in Record_Binding);
  procedure Preform_Toggle_Fullscreen      (Binding : in Record_Binding);
  procedure Preform_Exit_To_Menu           (Binding : in Record_Binding);
  procedure Change_State                   (Kind : in Enumerated_Change);
  procedure Activate                       (Do_Activate, Do_Detect_Click : in Boolean; X, Y : in Integer_8_Signed);
  function Resize                          (Kind : in Enumerated_Resize; Border : in Record_Border) return Record_Border;
  package Import is
      procedure Initialize_Multi_Monitor;
      procedure Finalize_Multi_Monitor;
      procedure Initialize;
      procedure Finalize;
      procedure Iconize;
      procedure Assert_Only_Instance;
      procedure Adjust_Fullscreen;
      procedure Adjust_Windowed   (Width, Height : in Integer_4_Positive);
      procedure Set_Cursor        (X, Y : in Integer_8_Signed);
      procedure Set_Cursor_Style  (Cursor : in Enumerated_Cursor := Inactive_Cursor);
      procedure Clip_Mouse        (Undo : in Boolean := False; Do_Hide : in Boolean := False);
      function Update             return Boolean;
      function Is_Fullscreen_Only return Boolean;
      function Get_Borders        return Vector_Record_Border.Unprotected.Vector;
      function Get_Decoration     return Record_Border;
    end Import;
  package Detect_Menu_Mode_Entry is new Impulse("menuentry",  Preform_Detect_Menu_Mode_Entry);
  package Toggle_Fullscreen      is new Impulse("togglemode", Preform_Toggle_Fullscreen);
  package Exit_To_Menu           is new Impulse("exittomenu", Preform_Exit_To_Menu);
end Neo.System.Graphics.Window;
